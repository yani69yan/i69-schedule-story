"""
Django settings for framework project.
Generated by 'django-admin startproject' using Django 2.1.3.
For more information on this file, see
https://docs.djangoproject.com/en/2.1/topics/settings/
For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.1/ref/settings/
"""

import ast
import logging
import os
import environ
import datetime
from framework import override_settings
from datetime import timedelta
os.environ['TF_CPP_MIN_LOG_LEVEL'] = '3' 
import tensorflow as tf


# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

USE_X_FORWARDED_HOST = True
SECURE_PROXY_SSL_HEADER = ("HTTP_X_FORWARDED_PROTO", "https")

env = environ.Env()

# print(os.environ)

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv("DJ_SECRET_KEY", None)

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ["*"]

# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    # Third pary
    "channels",
    "ckeditor",
    "corsheaders",
    "crispy_forms",
    "django_celery_beat",
    "django_extensions",  # for `python manage.py runserver_plus` command
    "django_filters",
    "django_otp",
    "django_otp.plugins.otp_totp",
    "django_otp.plugins.otp_static",
    "easy_select2",
    "graphene_django",
    "graphql_jwt.refresh_token.apps.RefreshTokenConfig",
    "import_export",
    "nested_admin",
    "notifications",
    "onesignal_sdk",
    "otp_twilio",
    "push_notifications",
    "rest_framework",
    "rest_framework.authtoken",
    "social_django",
    "storages",
    "whitenoise",
    # Internal
    "chat.apps.ChatConfig",
    "defaultPicker",
    "django_object_actions",
    "dj_rest_auth",
    "gallery",
    "gifts.apps.GiftsConfig",
    "job_schedular",
    "moments.apps.MomentsConfig",
    "notificationsetting",
    "payments",
    "paypal.standard.ipn",
    "purchase.apps.PurchaseConfig",
    "reports.apps.ReportsConfig",
    "stock_image",
    "subscriptions",
    "user.apps.UserConfig",
    "worker",
    "check.apps.CheckConfig"
]


OTP_TWILIO_ACCOUNT = os.getenv("OTP_TWILIO_ACCOUNT", None)
OTP_TWILIO_AUTH = os.getenv("OTP_TWILIO_AUTH", None)
OTP_TWILIO_FROM = os.getenv("OTP_TWILIO_FROM", None)
OTP_TWILIO_CHALLENGE_MESSAGE = "Sent by SMS"
OTP_TWILIO_TOKEN_VALIDITY = 300  # SMS code will be valid for 6 minutes

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "corsheaders.middleware.CorsMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "social_django.middleware.SocialAuthExceptionMiddleware",
    "whitenoise.middleware.WhiteNoiseMiddleware",
    "django_otp.middleware.OTPMiddleware",
    "user.middleware.TokenAuthenticationMiddleware",
    "user.middleware.RequestMiddleware",
    "framework.middleware.RequestLoggerMiddleware"
]

AUTH_USER_MODEL = "user.User"

ROOT_URLCONF = "framework.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [os.path.join(BASE_DIR, "templates"), os.path.join(BASE_DIR, "static")],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
                "social.apps.django_app.context_processors.backends",
                "social.apps.django_app.context_processors.login_redirect",
            ],
            "libraries": {
                "admin_custom_tags": "user.templatetags.admin_custom_tags",
            },
        },
    },
]
ASGI_APPLICATION = "framework.router.application"


# comment this on production
EMAIL_BACKEND = "django.core.mail.backends.console.EmailBackend"

# Database
# https://docs.djangoproject.com/en/2.1/ref/settings/#databases
if env.db("DATABASE_URL", ""):
    DATABASES = {"default": env.db("DATABASE_URL")}
else:
    DATABASES = {"default": override_settings.DATABASE}

# Password validation
# https://docs.djangoproject.com/en/2.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]

# Internationalization
# https://docs.djangoproject.com/en/2.1/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_L10N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.1/howto/static-files/


SOCIAL_AUTH_USER_MODEL = "user.User"

GRAPHENE = {
    "SCHEMA": "framework.schema.schema",
    "SUBSCRIPTION_PATH": "/ws/graphql",
    "MIDDLEWARE": [
        "graphql_jwt.middleware.JSONWebTokenMiddleware",
    ],
}
AUTHENTICATION_BACKENDS = [
    "framework.model_backend.IsDeletedModelBackend",
    "social_core.backends.google.GoogleOAuth2",
    "social_core.backends.facebook.FacebookOAuth2",
    "social_core.backends.twitter.TwitterOAuth",
    "graphql_jwt.backends.JSONWebTokenBackend",
]
#    "graphql_auth.backends.GraphQLAuthBackend",


GRAPHQL_JWT = {
    "JWT_VERIFY_EXPIRATION": True,
    "JWT_LONG_RUNNING_REFRESH_TOKEN": True,
    "JWT_EXPIRATION_DELTA": timedelta(days=14),
    "JWT_REFRESH_EXPIRATION_DELTA": timedelta(days=14),
    "JWT_ALLOW_ANY_CLASSES": [
        "graphql_auth.mutations.Register",
        "graphql_auth.mutations.VerifyAccount",
        "graphql_auth.mutations.ResendActivationEmail",
        "graphql_auth.mutations.SendPasswordResetEmail",
        "graphql_auth.mutations.PasswordReset",
        "graphql_auth.mutations.ObtainJSONWebToken",
        "graphql_auth.mutations.VerifyToken",
        "graphql_auth.mutations.RefreshToken",
        "graphql_auth.mutations.RevokeToken",
        "graphql_auth.mutations.VerifySecondaryEmail",
    ],
}

CHANNEL_LAYERS = {
    "default": {
        "BACKEND": "channels_redis.core.RedisChannelLayer",
        "CONFIG": {
            "hosts": [
                ast.literal_eval(
                    os.environ.get("REDIS_CHANNEL_BACKEND",
                                   ("127.0.0.1", 6379))
                )
            ],
        },
    },
}
# CHANNEL_LAYERS = {
#     "default": {
#         "BACKEND": "channels.layers.InMemoryChannelLayer"
#     }
# }

# CORS_ALLOW_ALL_ORIGINS = True

CACHES = {
    "default": {
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": os.environ.get("REDIS_CACHE_URL", "redis://127.0.0.1:6379/1"),
        "OPTIONS": {"CLIENT_CLASS": "django_redis.client.DefaultClient"},
        "KEY_PREFIX": "example",
    }
}

WSGI_APPLICATION = "framework.wsgi.application"

# Number of seconds of inactivity before a user is marked offline
USER_ONLINE_TIMEOUT = 300

# Number of seconds that we will keep track of inactive users for before
# their last seen is removed from the cache
USER_LASTSEEN_TIMEOUT = 60 * 60 * 24 * 30

SOCIAL_AUTH_GOOGLE_OAUTH2_KEY = os.getenv("SOCIAL_AUTH_GOOGLE_OAUTH2_KEY", None)
SOCIAL_AUTH_GOOGLE_OAUTH2_SECRET = os.getenv("SOCIAL_AUTH_GOOGLE_OAUTH2_SECRET", None)
SOCIAL_AUTH_FACEBOOK_KEY = os.getenv("SOCIAL_AUTH_FACEBOOK_KEY", None)  # App Secret
SOCIAL_AUTH_FACEBOOK_SECRET = os.getenv("SOCIAL_AUTH_FACEBOOK_SECRET", None)
SOCIAL_AUTH_FACEBOOK_SCOPE = ["email"]

SOCIAL_AUTH_FACEBOOK_PROFILE_EXTRA_PARAMS = {
    "fields": "id,name,email",
}

SOCIAL_AUTH_TWITTER_KEY = os.getenv("SOCIAL_AUTH_TWITTER_KEY", None)
SOCIAL_AUTH_TWITTER_SECRET = os.getenv("SOCIAL_AUTH_TWITTER_SECRET", None)
SOCIAL_AUTH_TWITTER_CALLBACK_URLS = os.getenv("SOCIAL_AUTH_TWITTER_CALLBACK_URLS", None)
# SOCIAL_AUTH_TWITTER_CALLBACK_URLS = 'http://localhost:8000/signin-twitter'


PAYPAL_RECEIVER_EMAIL = os.getenv("PAYPAL_RECEIVER_EMAIL", None)

PAYPAL_TEST = True


ONESIGNAL_REST_API_KEY = os.getenv("ONESIGNAL_REST_API_KEY", None)
ONESIGNAL_APP_ID = os.getenv("ONESIGNAL_APP_ID", None)

SOCIAL_AUTH_JSONFIELD_ENABLED = True


REST_FRAMEWORK = {
    "DEFAULT_AUTHENTICATION_CLASSES": [
        "dj_rest_auth.jwt_auth.JWTCookieAuthentication",
        "rest_framework.authentication.TokenAuthentication",
        "rest_framework.authentication.SessionAuthentication",
    ],
    "DEFAULT_PAGINATION_CLASS": "rest_framework.pagination.LimitOffsetPagination",
    "PAGE_SIZE": 100,
    "ACCESS_TOKEN_LIFETIME": datetime.timedelta(hours=1),
}

# CORS_ALLOWED_ORIGINS = [
#     "http://localhost:3000",
#     "https://i69app.com",
#     "https://admin.i69app.com",
#     "https://i69social-admin.vercel.app",
#     "https://admin-panel-code.vercel.app",
#     "https://studio.apollographql.com",
#     "https://chatadmin-mode.click",
# ]
CORS_ALLOWED_METHODS = ["GET", "POST", "PUT", "PATCH", "OPTIONS", "DELETE"]
REST_AUTH_SERIALIZERS = {
    "JWT_TOKEN_CLAIMS_SERIALIZER": "user.serializers.MyTokenObtainPairSerializer"
}
CORS_ALLOW_ALL_ORIGINS = True


DATA_UPLOAD_MAX_MEMORY_SIZE = 500000000  # 500MB
FILE_UPLOAD_MAX_MEMORY_SIZE = DATA_UPLOAD_MAX_MEMORY_SIZE


PUSH_NOTIFICATIONS_SETTINGS = {
    "FCM_API_KEY": os.getenv("FCM_API_KEY", None),
    # "APNS_CERTIFICATE": "/path/to/your/certificate.pem",
}

CORS_REPLACE_HTTPS_REFERER = True

DJANGO_NOTIFICATIONS_CONFIG = {"USE_JSONFIELD": True}

DOMAIN_URL = "https://api.i69app.com"
    
import traceback
class Filter(logging.Filter):
    def filter(self, record):
        return record.levelname not in ('ERROR', 'CRITICAL') 
    
class ExcludeQueryFilter(logging.Filter):
    def filter(self, record):
        return "Traceback" not in record.getMessage()
    
class ExceptionFormatter(logging.Formatter):
    def format(self, record):
        if isinstance(record.exc_info, tuple):
            record.exc_data = ' %s %s' % record.exc_info[:2]
        else:
            record.exc_data = ''
        return super(ExceptionFormatter, self).format(record)

    def formatException(self, exc_info):
        if exc_info:
            exc_type, exc_value, _ = exc_info
            formatted_exception = traceback.format_exception_only(exc_type, exc_value)[0].strip()
            return f' {exc_type.__name__}: {formatted_exception}'
        return ''

    def formatTraceback(self, exc_info):
        if exc_info:
            exc_type, exc_value, exc_traceback = exc_info
            formatted_traceback = traceback.format_exception(exc_type, exc_value, exc_traceback)
            return ' '.join(formatted_traceback).strip()
        return ''

    def formatLogRecord(self, record):
        if record.exc_info and not record.exc_data:
            record.exc_data = self.formatTraceback(record.exc_info)
        return super(ExceptionFormatter, self).formatLogRecord(record)

class ProductionExceptionFormatter(logging.Formatter):
    def format(self, record):
        if isinstance(record.exc_info, tuple):
            record.exc_data = ' %s %s' % record.exc_info[:2]
            record.exc_info = ()
        else:
            record.exc_data = ''
        return super(ProductionExceptionFormatter, self).format(record)

    def formatException(self, exc_info):
        if exc_info:
            exc_type, exc_value, _ = exc_info
            return f' Error: {exc_type.__name__}'
        return ''

    def formatTraceback(self, exc_info):
        if exc_info:
            exc_type, exc_value, exc_traceback = exc_info
            formatted_traceback = traceback.format_exception(exc_type, exc_value, exc_traceback)
            return ' '.join(formatted_traceback).strip()
        return ''

    def formatLogRecord(self, record):
        if record.exc_info and not record.exc_data:
            record.exc_data = self.formatTraceback(record.exc_info)
        return super(ProductionExceptionFormatter, self).formatLogRecord(record)


if DEBUG:
    LOGGING = {
        "version": 1,
        "disable_existing_loggers": False,
        "formatters": {
            "verbose": {
                "format": "[%(asctime)s] %(levelname)s '%(message)s'",
                'datefmt': '%d/%b/%Y:%H:%M:%S +0000',
            },
            "simple": {
                "format": "{levelname} {message}",
                "style": "{",
            },
            "exception": {
                '()': ExceptionFormatter
            }
        },
        "filters": {
            'request': {
                '()': Filter
            },
            'exclude_query': {
                '()': ExcludeQueryFilter
            }
        },
        "handlers": {
            "exception": {
                "class": "logging.handlers.TimedRotatingFileHandler",
                "filename": "/proc/1/fd/1",
                "when": "D",
                "interval": 1,
                "formatter": "exception",
            },
            "console": {
                "class": "logging.handlers.TimedRotatingFileHandler",
                "filename": "/proc/1/fd/1",
                "when": "D",
                "interval": 1,
                "formatter": "verbose",
            },
            "null": {
                "class": "logging.NullHandler",
            },
            'mail_admins': {
                'level': 'ERROR',
                'class': 'framework.custom_admin_handler.CustomAdminHandler',
            },
        },
        "loggers": {
            "django": {
                "handlers": [
                    "console",
                ],
                "level": "INFO",
                "propagate": True,
                "filters": ["request"]
            },
            'celery': {
                'handlers': [
                    'exception',
                ],
                'level': 'ERROR',
                'propagate': True
            },
            "django.security.DisallowedHost": {
                "handlers": ["null"],
                "propagate": True,
            },
            'django.request': {
                'handlers': ['mail_admins', 'exception'],
                'level': 'ERROR',
                'propagate': True,
            },
        },
    }
else:
    LOGGING = {
        "version": 1,
        "disable_existing_loggers": False,
        "formatters": {
            "verbose": {
                "format": "[%(asctime)s] %(levelname)s '%(message)s'",
                'datefmt': '%d/%b/%Y:%H:%M:%S +0000',
            },
            "simple": {
                "format": "{levelname} {msg}",
                "style": "{",
            },
            "prodException": {
                '()': ProductionExceptionFormatter
            }
        },
        "filters": {
            'request': {
                '()': Filter
            },
        },
        "handlers": {
            "exception": {
                "class": "logging.handlers.TimedRotatingFileHandler",
                "filename": "/proc/1/fd/1",
                "when": "D",
                "interval": 1,
                "formatter": 'prodException',
            },
            "console": {
                "class": "logging.handlers.TimedRotatingFileHandler",
                "filename": "/proc/1/fd/1",
                "when": "D",
                "interval": 1,
                "formatter": "verbose",
            },
            "null": {
                "class": "logging.NullHandler",
            },
            'mail_admins': {
                'level': 'ERROR',
                'class': 'framework.custom_admin_handler.CustomAdminHandler',
            },
        },
        "loggers": {
            "django": {
                "handlers": [
                    "console",
                ],
                "level": "INFO",
                "propagate": True,
                "filters": ["request"]
            },
            'celery': {
                'handlers': [
                    'exception',
                ],
                'level': 'ERROR',
                'propagate': False
            },
            "django.security.DisallowedHost": {
                "handlers": ["null"],
                "propagate": False,
            },
            'django.request': {
                'handlers': ['mail_admins', 'exception'],
                'level': 'ERROR',
                'propagate': True,
            },
        },
    }

USE_S3 = os.getenv("USE_S3", "False").lower() == "true"

if USE_S3:
    # aws settings
    AWS_ACCESS_KEY_ID = os.getenv("AWS_ACCESS_KEY_ID", "")
    AWS_SECRET_ACCESS_KEY = os.getenv("AWS_SECRET_ACCESS_KEY", "")
    AWS_STORAGE_BUCKET_NAME = os.getenv("AWS_STORAGE_BUCKET_NAME", "")
    AWS_S3_REGION_NAME = os.getenv("AWS_S3_REGION_NAME", "eu-west-1")
    AWS_S3_CUSTOM_DOMAIN = "djbbbm5n90p1g.cloudfront.net"
    AWS_S3_OBJECT_PARAMETERS = {"CacheControl": "max-age=86400"}
    DEFAULT_FILE_STORAGE = "framework.storage_backends.PublicMediaStorage"
else:
    MEDIA_ROOT = os.path.join(BASE_DIR, "media")
    MEDIA_URL = "/media/"

STATIC_ROOT = os.path.join(BASE_DIR, "staticfiles")
STATIC_URL = "/static/"
STATICFILES_STORAGE = "whitenoise.storage.CompressedManifestStaticFilesStorage"
# Extra places for collectstatic to find static files.
STATICFILES_DIRS = (os.path.join(BASE_DIR, "static"),)


EMAIL_BACKEND = "django.core.mail.backends.smtp.EmailBackend"
EMAIL_HOST = "smtp.sendgrid.net"
EMAIL_HOST_USER = "apikey"
EMAIL_HOST_PASSWORD = (
    ""
)
EMAIL_PORT = 587
EMAIL_USE_TLS = True
DEFAULT_FROM_EMAIL = "contact-dev-testing@i69app.com"

# Specify the timeout to send the next notification for consecutive visits. Time out is specified in Minutes
PROFILE_VISIT_NOTIFICATION_TIMEOUT = 5  # In Minutes
